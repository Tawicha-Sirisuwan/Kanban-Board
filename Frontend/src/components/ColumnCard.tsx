import React, { useState, useEffect } from 'react';
import TaskCard from './TaskCard';
import type { Task } from '../models/TaskModels';
import { API_URL } from '../config';
import './ColumnCard.css';
import AddTaskModal from './AddTaskModal';

interface ColumnProps {
  columnId: number;
  title: string;
  tasks: Task[];
  onUpdate?: () => void;
}

const ColumnCard: React.FC<ColumnProps> = ({ columnId, title, tasks, onUpdate }) => {
  const [editing, setEditing] = useState(false);
  const [newTitle, setNewTitle] = useState(title);
  const [taskList, setTaskList] = useState<Task[]>(tasks); // ‡πÉ‡∏ä‡πâ taskList ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Task
  const [isModalOpen, setIsModalOpen] = useState(false);

 
  useEffect(() => {
    setTaskList(tasks);
  }, [tasks]);

  const handleRename = async () => {
    const token = localStorage.getItem('token');
    if (!token) return alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');

    try {
      const res = await fetch(`${API_URL}/board-columns/${columnId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ title: newTitle }),
      });

      if (res.ok) {
        setEditing(false);
        onUpdate?.(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      } else {
        alert('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (err) {
      console.error(err);
    }
  };

  const handleDelete = async () => {
    if (!window.confirm('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ?')) return;

    const token = localStorage.getItem('token');
    if (!token) return alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');

    try {
      const res = await fetch(`${API_URL}/board-columns/${columnId}`, {
        method: 'DELETE',
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (res.ok) {
        onUpdate?.(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
      } else {
        alert('‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (err) {
      console.error(err);
    }
  };

  const openAddTaskModal = () => {
    setIsModalOpen(true); // ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° Task
  };

  const closeAddTaskModal = () => {
    setIsModalOpen(false); // ‡∏õ‡∏¥‡∏î Modal
  };

  const handleTaskAdded = (newTask: Task) => {
    setTaskList((prevTasks) => [...prevTasks, newTask]); // ‡πÄ‡∏û‡∏¥‡πà‡∏° Task ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô taskList
    onUpdate?.(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    closeAddTaskModal(); // ‡∏õ‡∏¥‡∏î Modal
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä taskList ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Task
  const handleTaskUpdated = (updatedTask: Task) => {
    setTaskList((prevTasks) =>
      prevTasks.map((task) => (task.task_id === updatedTask.task_id ? updatedTask : task)) // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä taskList
    );
  };

  const handleTaskDeleted = (taskId: number) => {
    setTaskList((prevTasks) => prevTasks.filter((task) => task.task_id !== taskId)); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä taskList ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Task ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
  };

  return (
    <div className="column-card">
      <div className="column-header">
        {editing ? (
          <>
            <input
              value={newTitle}
              onChange={(e) => setNewTitle(e.target.value)}
              className="column-edit-input"
            />
            <button className="column-btn save" onClick={handleRename}>üíæ</button>
            <button className="column-btn cancel" onClick={() => setEditing(false)}>‚ùå</button>
          </>
        ) : (
          <>
            <h3 className="column-title">{title}</h3>
            <div className="column-actions">
              <button className="column-btn add" onClick={openAddTaskModal} title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î">Ôºã</button>
              <button className="column-btn edit" onClick={() => setEditing(true)} title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç">‚úèÔ∏è</button>
              <button className="column-btn delete" onClick={handleDelete} title="‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå">X</button>
            </div>
          </>
        )}
      </div>

      <div className="task-list">
        {taskList.map((task) => (
          <TaskCard
            key={task.task_id}
            task={task}
            onTaskUpdated={handleTaskUpdated} // ‡∏™‡πà‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Task
            onTaskDeleted={handleTaskDeleted} // ‡∏™‡πà‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏•‡∏ö Task
          />
        ))}
      </div>

      {/* ‡πÄ‡∏û‡∏¥‡πà‡∏° AddTaskModal */}
      {isModalOpen && (
        <AddTaskModal
          columnId={columnId}
          onClose={closeAddTaskModal}
          onTaskAdded={handleTaskAdded} // ‡∏™‡πà‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö Task ‡πÉ‡∏´‡∏°‡πà
        />
      )}
    </div>
  );
};

export default ColumnCard;
